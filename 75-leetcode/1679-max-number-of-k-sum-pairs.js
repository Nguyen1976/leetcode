/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var maxOperations = function (nums, k) {
  let map = new Map()
  let count = 0

  for (let num of nums) {
    let search = k - num
    if (map.has(search) && map.get(search) > 0) {
      map.set(search, map.get(search) - 1)
      count++
    } else {
      if (map.has(num)) {
        map.set(num, map.get(num) + 1)
      } else {
        map.set(num, 1)
      }
    }
  }

  return count
}
console.log(
  'üöÄ ~ 1679-max-number-of-k-sum-pairs.js:22 ~ maxOperations:',
  maxOperations([1, 2, 3, 4], 5)
)

//√ù t∆∞·ªüng:
//S·ª≠ d·ª•ng map m·ªói l·∫ßn l·∫∑p s·∫Ω t√¨m ki·∫øm k - num trong map n·∫øu k c√≥ th√¨ s·∫Ω th√™m num hi·ªán t·∫°i
//Map s·∫Ω l∆∞u d∆∞·ªõi d·∫°ng l√† (num, s·ªë l·∫ßn num ƒëang l∆∞u tr≈©)
//T·ª©c l√† (2, 2)t·ª©c l√† s·ªë 2 xu·∫•t hi·ªán 2 l·∫ßn

//√ù t∆∞·ªüng 2:
//S·ª≠ d·ª•ng sort(nlogn) ƒë·ªÉ s·∫Øp x·∫øp v√† sau ƒë√≥ d√πng two pointer (left v√† right)

//C·∫£ 2 c√°ch ƒë·ªÉ ·ªïn nh·ªØng v√¨ b√†i n√†y m·∫£ng c√≥ th·ªÉ d∆∞·ª£c v√† kh√¥ng s·∫Øp x·∫øp
//L√™n d√πng map t·ªëi ∆∞u h∆°n v√¨ time complexity = O(n) thay v√¨ O(nlogn)
//Nh∆∞ng space complexity s·∫Ω l√† O(n)

//C√≤n two pointer s·∫Ω l√† O(nlogn) v√† O(1) (space complexity t·ªëi ∆∞u h∆°n)
